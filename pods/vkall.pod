
=head1 BRIEF DESCRIPTION

Wayland Lucurious Vulkan All Header

=head1 SYNOPSIS

B<#include> <wlu/vkall.h>

=over

=item typedef B<struct swap_chain_buffers> {

=over

=item B<VkImage> image;

=item B<VkImageView> view;

=back

=item } B<swap_chain_buffers> ;

=item

=item typedef B<struct queue_family_indices> {

=over

=item B<uint32_t> graphics_family;

=item B<uint32_t> present_family;

=back

=item } B<queue_family_indices> ;

=item

=item typedef B<struct vkcomp> {

=over

=item B<VkInstance> instance;

=item B<VkSurfaceKHR> surface;

=item

=item B<VkLayerProperties> *vk_layer_props;

=item B<uint32_t> vk_layer_count;

=item

=item B<VkExtensionProperties> *ep_instance_props;

=item B<uint32_t> ep_instance_count;

=item

=item B<VkExtensionProperties> *ep_device_props;

=item B<uint32_t> ep_device_count;

=item

=item B<VkPhysicalDeviceProperties> device_properties;

=item B<VkPhysicalDeviceFeatures> device_features;

=item B<VkPhysicalDeviceMemoryProperties> memory_properties;

=item B<VkPhysicalDevice> physical_device;

=item

=item B<VkDeviceQueueCreateInfo> *queue_create_infos;

=item B<VkQueueFamilyProperties> *queue_families;

=item B<uint32_t> queue_family_count;

=item B<queue_family_indices> indices;

=item

=item B<VkDevice> device;

=item B<VkQueue> graphics_queue;

=item

=item B<swap_chain_buffers> *sc_buffs;

=item B<VkSwapchainKHR> swap_chain;

=item B<VkFormat> sc_img_fmt;

=item B<VkExtent2D> sc_extent;

=item B<uint32_t> img_count;

=back

=item } B<vkcomp> ;

=item

=item vkcomp B<*wlu_init_vk()>;

=item VkResult B<wlu_set_global_layers(vkcomp> *app);

=item VkResult B<wlu_create_instance(vkcomp> *appB<, char > *app_name B<, char> *engine_name);

=item VkResult B<wlu_enumerate_devices(vkcomp> *app B<, VkQueueFlagBits> vkqfbits B<, VkPhysicalDeviceType> vkpdtype);

=item VkResult B<wlu_set_logical_device(vkcomp> *app);

=item VkResult B<wlu_vkconnect_surfaceKHR(vkcomp> *app B<, void> *wl_display B<, void> *wl_surface);

=item VkSurfaceCapabilitiesKHR B<wlu_q_device_capabilities(vkcomp> *app);

=item VkSurfaceFormatKHR B<wlu_choose_swap_surface_format(vkcomp> *appB<, VkFormat> formatB<, VkColorSpaceKHR> colorSpace);

=item VkPresentModeKHR B<wlu_choose_swap_present_mode(vkcomp> *app);

=item VkExtent2D B<wlu_choose_swap_extent(VkSurfaceCapabilitiesKHR> capabilities);

=item VkResult B<wlu_create_swap_chain(vkcomp> *appB<, VkSurfaceCapabilitiesKHR> capabilitiesB<,>

=over

=over

=item B<VkSurfaceFormatKHR> surface_fmtB<, VkPresentModeKHR> pres_modeB<, VkExtent2D> extent);

=back

=back

=item VkResult B<wlu_create_swap_chain(vkcomp> *app);

=item VkResult B<wlu_create_img_views(vkcomp> *app B<, wlu_image> type);

=item VkResult B<wlu_create_gp(vkcomp> *appB<, uint32_t> num_argsB<, ...>);

=item void B<wlu_freeup_vk(void> *data);

=back

=head1 DESCRIPTION

=over

=item B<struct swap_chain_buffers>

=over

=item B<VkImage image>

VkImage is the acutal image object that represents multidimensional (up to 3) arrays of data.
Data of which has various purposes (e.g. attachments, textures) and can be utilized by binding images
to a graphics or compute pipeline via descriptor sets.

=item B<VkImageView view>

VkImage objects are not accessed by the shaders pipeline directly. So, VkImageViews that represent
ranges of image subresources (The number of mipmap levels and array layers) and metadata are used for
said purpose. Views must contain images of the same type and must have valid subsets of image subresources.

=back

=item B<struct queue_family_indices>

Almost every operation in Vulkan, anything from drawing to uploading textures, requires
commands to be submitted to a queue. Different queue families produce different types of
queues and each queue family allows for a subset of commands.

=over

=item B<uint32_t graphics_family>

Is equal to the queue family index that has support for whatever VkQueueFlagBits that are set in wlu_enumerate_devices(3)
(eg. VK_QUEUE_GRAPHICS_BIT). For more info visit I<https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkQueueFlagBits.html>

=item B<uint32_t present_family>

Is equal to the queue family index that allows a device to present images to a surface.
For more info visit I<https://khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkGetPhysicalDeviceSurfaceSupportKHR.html>

=back

=item B<struct vkcomp>

=over

=item B<VkInstance> instance

The instance variable is used to set up devices.
It'll deal with enumerating VkPhysicalDevices and querying their properties, etc...
A VkInstance is the way your liblucurious.so connects to the vulkan api.

=item B<VkSurfaceKHR> surface

The surface variable represents an abstract type of surface to present rendered images to.
Also used to destroy VkSurfaceKHR objects.

=item B<VkLayerProperties> *vk_layer_props

The vk_layer_props pointer holdes all validation layers extensions that comes
installed with the vulkan sdk.

=item B<uint32_t> vk_layer_count

The vk_layer_count variable keeps track of the amount of validation layer are available.
For more information go to lucur(1).

=item B<VkExtensionProperties> *ep_instance_props

The ep_instance_props pointer keeps track of all available instance extensions.
For more information go to lucur(1).

=item B<uint32_t> ep_instance_count

The ep_instance_count variable keeps track of the amount of instance extensions
are available for a device.

=item B<VkExtensionProperties> *ep_device_props

The ep_device_props pointer keeps track of all available device extensions.
For more information go to lucur(1).

=item B<uint32_t> ep_device_count

The ep_device_count variable keeps track of the amount of device extensions
are available.

=item B<VkPhysicalDeviceProperties> device_properties

Used to store a phyical device properties like the name, type
and supported Vulkan version. This variable is utilized in the
is_device_suitable() function.

=item B<VkPhysicalDeviceFeatures> device_features

Used to store a physical device features like geometryShader. This variable
is utilized in the creation of a logical device in function wlu_set_logical_device(3).

=item B<VkPhysicalDeviceMemoryProperties> memory_properties

Current not used for anything in the API.

=item B<VkPhysicalDevice> physical_device

This is set in wlu_enumerate_devices(3) after cycling through a list
of physical devices this will be set to a device that fits the api's needs.

=item B<VkDeviceQueueCreateInfo> *queue_create_infos

The queue_create_infos variable is a pointer to the struct VkDeviceQueueCreateInfo. It is
set in wlu_set_logical_device(3).

=item B<VkQueueFamilyProperties> *queue_families

The queue_families variable is a pointer to the struct VkQueueFamilyProperties. It is
set in the find_queue_families().

=item B<uint32_t> queue_family_count

The queue_family_count variable is used to store the amount of queue families
a phyical device can have.

=item B<queue_family_indices> indices

Is a variable to the B<queue_family_indices struct>.

=item B<VkDevice> device

The device variable is used to deal with Vulkan rendering systems.
This is the api's way of interfacing with a physical device.
The variable is set in wlu_set_logical_device(3).

=item B<VkQueue> graphics_queue

Queues are automatically created with the logical device. This is the
queue handle to interface with them.

=item B<swap_chain_buffers> *sc_buffs

The sc_buffs variable is a pointer to the B<swap_chain_buffers struct>.

=item B<VkSwapchainKHR> swap_chain

The swap_chain variable is set in wlu_create_swap_chain(3).

=item B<VkFormat> sc_img_fmt

The sc_img_fmt variable stores the surface format return by wlu_choose_swap_surface_format(3).

=item B<VkExtent2D> sc_extent

The sc_extent variable stores the resolution returned by wlu_choose_swap_extent(31) for
a particular surface which is most likely 1080p or 1920x1080.

=item B<uint32_t> img_count

The img_count variable is updated in wlu_create_swap_chain(3). It represents the amount
images a particular logical device swap chain can handle.

=back

=back

=head1 RETURN VALUES

Upon success or failure each VkResult function returns one of vulkans VkResult enum codes located here.
I<https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkResult.html>

=head1 AUTHOR

Vincent Davis Jr.

=head1 SEE ALSO

wlu_init_vk(3) wlu_set_global_layers(3) wlu_create_instance(3) wlu_enumerate_devices(3)
wlu_set_logical_device(3) wlu_vkconnect_surfaceKHR(3) wlu_q_device_capabilities(3)
wlu_choose_swap_surface_format(3) wlu_choose_swap_present_mode(3) wlu_choose_swap_extent(3)
wlu_create_swap_chain(3) wlu_create_img_views(3) wlu_create_gp(3) wlu_freeup_vk(3)
